/*
#include <Arduino.h>
#include <cmath>
#include <ESP32Servo.h>

// TEST ROBOT SERVO MOTEURS

#define PIN_SERVO1 19 // SERVO BASE (0)
#define PIN_SERVO2 22 // SERVO COUDE 1 (4)
#define PIN_SERVO3 21 // SERVO COUDE 2 (15)
#define PIN_SERVO4 23 // SERVO COUDE 3 (17)

Servo FT6335Servo;
Servo DM996Servo1;
Servo DM996Servo2;
Servo DM996Servo3;

void setup()
{

  FT6335Servo.attach(PIN_SERVO1);
  DM996Servo1.attach(PIN_SERVO2);
  DM996Servo2.attach(PIN_SERVO3);
  DM996Servo3.attach(PIN_SERVO4);

  /*
  // Position pose robot
  FT6335Servo.write(0);
  DM996Servo1.write(0);
  DM996Servo2.write(30);
  DM996Servo3.write(30);
}

/* void pose_init() // A COMMENTER SI DANS LE SETUP POUR TEST
{
  FT6335Servo.write(0);
  delay(10);

  DM996Servo1.write(0);
  delay(10);

  DM996Servo2.write(30);
  delay(10);

  DM996Servo3.write(30);
  delay(10);
  delay(1000);
}

void loop()
{
  // INIT POSITION -- A COMMENTER SI DANS LE SETUP
  FT6335Servo.write(0);
  delay(10);
  DM996Servo1.write(0);
  delay(10);
  DM996Servo2.write(5);
  delay(10);
  DM996Servo3.write(0);
  delay(10);
  sleep(3);

  // MOVE ROBOT PRISE PIECE
  DM996Servo1.write(20);
  delay(50);
  delay(1000);
  DM996Servo3.write(0);
  delay(50);
  delay(1000);
  DM996Servo2.write(20);
  delay(50);
  delay(1000);
  DM996Servo2.write(30);
  delay(50);
  delay(1000);
  FT6335Servo.write(48);
  delay(50);
  delay(1000);
  DM996Servo2.write(20);
  delay(50);
  sleep(3);
  DM996Servo2.write(30);
  delay(50);
  sleep(3);

  FT6335Servo.write(0);
  delay(50);
  sleep(1);

  // moveSmooth(FT6335Servo, 48);
  FT6335Servo.write(48);
  delay(10);
  sleep(3);

  FT6335Servo.write(48); // 90° robot
  delay(10);
  sleep(3);

  // moveSmooth(DM996Servo2, 25);
  DM996Servo1.write(25);
  delay(10);
  sleep(3);
  // moveSmooth(DM996Servo2, 50);
  DM996Servo1.write(50);
  delay(10);
  sleep(3);

  // TEST BOUCLE FOR
  for (int i = 0; i <= 150; i++)
  {
    DM996Servo1.write(i);
    delay(10);
  }

  for (int i = 150; i >= 0; i--)
  {
    DM996Servo1.write(i);
    delay(10);
  }

  sleep(0);
}*/

#include <ESP32Servo.h>

Servo FT6335Servo;
Servo DM996Servo1;
Servo DM996Servo2;
Servo DM996Servo3;

int servoPin = 23;  // Servo Base (19)
int servo1Pin = 22; // Servo 1 (22)
int servo2Pin = 21; // Servo 2 (21)
int servo3Pin = 19; // Servo 3 (bout de bras) (23)

// Tolérance d'angle (marge d'erreur acceptable en degrés)
const int angleTolerance = 2;

void setup()
{
  Serial.begin(115200);

  FT6335Servo.attach(servoPin);
  DM996Servo1.attach(servo1Pin);
  DM996Servo2.attach(servo2Pin);
  DM996Servo3.attach(servo3Pin);

  DM996Servo2.write(40);
  FT6335Servo.write(0);
  DM996Servo1.write(50);
  DM996Servo3.write(140);

  while (!Serial)
  {
    ; // Attente de connexion série
  }
}

/*void moveSlowlyBase(int startAngle, int endAngle, int delay_ms)
{
  int totalRotation;
  if (startAngle <= endAngle)
  {
    totalRotation = endAngle - startAngle;
    if (totalRotation > 97) // 180 deg du servo moteur
    {
      totalRotation = -(194 - totalRotation); // 360 deg du servo moteur
    }
  }
  else
  {
    totalRotation = -(startAngle - endAngle);
    if (totalRotation < -97)
    {
      totalRotation = 194 + totalRotation;
    }
  }

  int step = (totalRotation > 0) ? 1 : -1;
  int currentAngle = startAngle;

  for (int i = 0; i != totalRotation; i += step)
  {
    currentAngle = (currentAngle + step + 194) % 194;
    FT6335Servo.write(currentAngle);
    delay(delay_ms);
  }

  FT6335Servo.write(endAngle); // Assurez-vous d'atteindre l'angle final
}*/

// Fonction générique pour déplacer lentement n'importe quel servo
/*void moveSlowly(Servo &servo, int startAngle, int endAngle, int delay_ms)
{
  // Ajoute une vérification de tolérance
  if (abs(startAngle - endAngle) <= angleTolerance)
  {
    // Si la différence est dans la marge de tolérance, ne pas ajuster
    Serial.println("Mouvement annulé : angle dans la marge de tolérance.");
    return;
  }

  int step = (startAngle < endAngle) ? 1 : -1;

  for (int angle = startAngle; angle != endAngle; angle += step)
  {
    servo.write(angle);
    delay(delay_ms);
  }
  servo.write(endAngle); // Assurez-vous d'atteindre l'angle final
}*/

// TEST AVC TOLERANCE ANGLE ROBOT
void moveSlowly(Servo &servo, int startAngle, int endAngle, int delayTime, int tolerance = 1)
{
  int currentAngle = servo.read();
  int step = (endAngle > startAngle) ? 1 : -1;

  while (abs(currentAngle - endAngle) > tolerance)
  {
    currentAngle += step;
    servo.write(currentAngle);
    delay(delayTime);
  }
}

/*
void moveSlowlyBase(int startAngle, int endAngle, int delay_ms)
{
  int step = (startAngle < endAngle) ? 1 : -1;

  for (int angle = startAngle; angle != endAngle; angle += step)
  {
    FT6335Servo.write(angle);
    delay(delay_ms);
  }
  FT6335Servo.write(endAngle); // Assurez-vous d'atteindre l'angle final
}

void moveSlowly1(int startAngle, int endAngle, int delay_ms)
{
  int step = (startAngle < endAngle) ? 1 : -1;

  for (int angle = startAngle; angle != endAngle; angle += step)
  {
    DM996Servo1.write(angle);
    delay(delay_ms);
  }
  DM996Servo1.write(endAngle); // Assurez-vous d'atteindre l'angle final
}

void moveSlowly2(int startAngle, int endAngle, int delay_ms)
{
  int step = (startAngle < endAngle) ? 1 : -1;

  for (int angle = startAngle; angle != endAngle; angle += step)
  {
    DM996Servo2.write(angle);
    delay(delay_ms);
  }
  DM996Servo2.write(endAngle); // Assurez-vous d'atteindre l'angle final
}

void moveSlowly3(int startAngle, int endAngle, int delay_ms)
{
  int step = (startAngle < endAngle) ? 1 : -1;

  for (int angle = startAngle; angle != endAngle; angle += step)
  {
    DM996Servo3.write(angle);
    delay(delay_ms);
  }
  DM996Servo3.write(endAngle); // Assurez-vous d'atteindre l'angle final
}*/

void loop()
{
  //  Vérification de la dispo des données sur le port série
  if (Serial.available() > 0)
  {
    char cmd_test = Serial.read();
    // Entrée par l'utilisateur = simulation d'un mot envoyé par un robot
    if (cmd_test == 'b')
    // MBASE
    {
      moveSlowly(FT6335Servo, 0, 1, 50, 3); // Déplace de 0° à 90° avec un délai de 50ms entre chaque degré
      Serial.println("MBASE a 90 deg");
    }
    if (cmd_test == '1')
    // M1
    {
      moveSlowly(DM996Servo1, 50, 105, 50, 3); // Déplace de 0° à 30° avec un délai de 50ms entre chaque degré
      Serial.println("M1 a 50 deg");
    }
    if (cmd_test == '2')
    // M2
    {
      moveSlowly(DM996Servo2, 40, 60, 25, 3); // Déplace de 40° à 20° avec un délai de 50ms entre chaque degré
      Serial.println("M2 a 50 deg");
    }
    if (cmd_test == '3')
    // M3
    {
      moveSlowly(DM996Servo3, 140, 120, 50, 3); // Déplace de 140° à 70° avec un délai de 50ms entre chaque degré
      Serial.println("M3 a 100 deg");
    }

    if (cmd_test == 'c')
    {
      moveSlowly(FT6335Servo, 0, 49, 50, 3); // Déplace de 0° à 90° avec un délai de 50ms entre chaque degré
      Serial.println("je suis a la pose 97");
    }
  }
}